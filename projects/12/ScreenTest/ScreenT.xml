<tokens>
<keyword> class </keyword>
<identifier> Screen </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> screen </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<identifier> Array </identifier>
<identifier> twoToThe </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> boolean </keyword>
<identifier> color </identifier>
<symbol> ; </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> init </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> color </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 64 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 128 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 512 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 1024 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 11 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 2048 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 4096 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 8192 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 14 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> + </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> clearScreen </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> screen </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 24576 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> boolean </keyword>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> color </identifier>
<symbol> = </symbol>
<identifier> b </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> address </identifier>
<symbol> , </symbol>
<identifier> value </identifier>
<symbol> , </symbol>
<identifier> mod </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> address </identifier>
<symbol> = </symbol>
<identifier> screen </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 32 </integerConstant>
<symbol> * </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> / </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> mod </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> / </symbol>
<integerConstant> 16 </integerConstant>
<symbol> * </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> value </identifier>
<symbol> = </symbol>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> peek </identifier>
<symbol> ( </symbol>
<identifier> address </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> color </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> value </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> value </identifier>
<symbol> | </symbol>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<identifier> mod </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> value </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> value </identifier>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> - </symbol>
<identifier> twoToThe </identifier>
<symbol> [ </symbol>
<identifier> mod </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> address </identifier>
<symbol> , </symbol>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> x2 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y2 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<symbol> , </symbol>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> b </identifier>
<symbol> , </symbol>
<identifier> diff </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> x2 </identifier>
<symbol> - </symbol>
<identifier> x1 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> y2 </identifier>
<symbol> - </symbol>
<identifier> y1 </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> y1 </identifier>
<symbol> &gt; </symbol>
<identifier> y2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y1 </identifier>
<symbol> = </symbol>
<identifier> y1 </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> y1 </identifier>
<symbol> &lt; </symbol>
<identifier> y2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y1 </identifier>
<symbol> = </symbol>
<identifier> y1 </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> &gt; </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x1 </identifier>
<symbol> = </symbol>
<identifier> x1 </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> &lt; </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x1 </identifier>
<symbol> = </symbol>
<identifier> x1 </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> &amp; </symbol>
<identifier> dy </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> + </symbol>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> + </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> diff </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> diff </identifier>
<symbol> + </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<identifier> b </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> diff </identifier>
<symbol> - </symbol>
<identifier> dx </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> &amp; </symbol>
<identifier> dy </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> + </symbol>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> + </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> diff </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> diff </identifier>
<symbol> + </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<identifier> b </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> diff </identifier>
<symbol> + </symbol>
<identifier> dx </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> &amp; </symbol>
<identifier> dy </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> + </symbol>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> + </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> diff </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> diff </identifier>
<symbol> - </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<identifier> b </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> diff </identifier>
<symbol> - </symbol>
<identifier> dx </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> &amp; </symbol>
<identifier> dy </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> + </symbol>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> + </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> diff </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> diff </identifier>
<symbol> - </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<identifier> b </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> diff </identifier>
<symbol> + </symbol>
<identifier> dx </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> x2 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y2 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> y1 </identifier>
<symbol> &gt; </symbol>
<identifier> y2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> , </symbol>
<identifier> x2 </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y1 </identifier>
<symbol> = </symbol>
<identifier> y1 </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawCircle </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> r </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> dy </identifier>
<symbol> , </symbol>
<identifier> term </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> r </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> &gt; </symbol>
<identifier> r </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> term </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> sqrt </identifier>
<symbol> ( </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> r </identifier>
<symbol> , </symbol>
<identifier> r </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<identifier> term </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> dy </identifier>
<symbol> , </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> term </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> dy </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
