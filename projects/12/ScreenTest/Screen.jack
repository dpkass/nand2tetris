// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int screen;
    static Array twoToThe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384+16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = screen;
        while(i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mod;
        let address = screen + (32 * y) + (x / 16);
        let mod = x - (x / 16 * 16);
        let value = Memory.peek(address);

        if(color){
            let value = (value | twoToThe[mod]);
        } else {
            let value = (value & (-1 - twoToThe[mod]));
        }

        do Memory.poke(address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;

        let dx = x2 - x1;
        let dy = y2 - y1;

        if(dx = 0){
            if(dy > 0){
                while(~(y1 > y2)){
                    do Screen.drawPixel(x1, y1);
                    let y1 = y1 + 1;
                }
            } else {
                while(~(y1 < y2)){
                    do Screen.drawPixel(x1, y1);
                    let y1 = y1 - 1;
                }
            }
            return;
        }

        if(dy = 0){
            if(dx > 0){
                while(~(x1 > x2)){
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 + 1;
                }
            } else {
                while(~(x1 < x2)){
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 - 1;
                }
            }
            return;
        }

        let a = 0;
        let b = 0;
        let diff = 0;

        if(dx > 0 & dy > 0) {
            while(~(Math.abs(a) > Math.abs(dx)) & ~(Math.abs(b) > Math.abs(dy))){
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        if(dx < 0 & dy > 0) {
            while(~(Math.abs(a) > Math.abs(dx)) & ~(Math.abs(b) > Math.abs(dy))){
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff < 0) {
                    let a = a - 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff + dx;
                }
            }
            return;
        }
        if(dx > 0 & dy < 0) {
            while(~(Math.abs(a) > Math.abs(dx)) & ~(Math.abs(b) > Math.abs(dy))){
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff < 0) {
                    let a = a + 1;
                    let diff = diff - dy;
                } else {
                    let b = b - 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        if(dx < 0 & dy < 0) {
            while(~(Math.abs(a) > Math.abs(dx)) & ~(Math.abs(b) > Math.abs(dy))){
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff < 0) {
                    let a = a - 1;
                    let diff = diff - dy;
                } else {
                    let b = b - 1;
                    let diff = diff + dx;
                }
            }
            return;
        }
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, term;

        let dy = -r;
        while(~(dy > r)){
            let term = Math.sqrt(Math.multiply(r, r) - Math.multiply(dy, dy));
            do Screen.drawLine((x - term), y + dy, (x + term), y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
