// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384+16384;

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int res, shiftedX, n;
        var boolean negX, negY;

        let res = 0;
        let n = 0;

        let negX = x < 0;
        let negY = y < 0;

        let x = Math.abs(x);
        let y = Math.abs(y);
        let shiftedX = x;

        while (n < 16) {
            if (~((y & twoToThe[n]) = 0)) {
                let res = res + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let n = n + 1;
        }

        if (negX = negY) {
            return res;
        }
        return -res;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, diff, res;
        var boolean negY, negX;

        let negX = x < 0;
        let negY = y < 0;

        if (negX) {
          let x = Math.abs(x);
        }
        if (negY) {
          let y = Math.abs(y);
        }

        if ((y > x) | (y < 0)) {
          return 0;
        }

        let q = x / (y + y);
        let diff = x - (q * (y + y));

        if (diff < y) {
          let res = q + q;
        } else {
          let res = q + q + 1;
        }

        if (negX = negY) {
          return res;
        } else {
          return -res;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, n, j, pow, temp;

        let n = 0;
        while(((Math.pow(2, n) < x) | (Math.pow(2, n) = x)) & (Math.pow(2, n) > 0)) {
            let n = n + 1;
        }
        if(Math.pow(2, n) < 0){
            let n = n + 1;
        }

        let y = 0;
        let j = n / 2 - 1;
        while((j > 0) | (j = 0)){
            let pow = Math.pow(2, j);
            let temp = (y + pow)*(y + pow);
            if(((temp < x) | (temp = x)) & (temp > 0)){
                let y = y + pow;
            }
            let j = j - 1;
        }
        return y;
    }

    function int pow(int x, int y) {
        var int res;

        if (y = 0) {
            return 1;
        }

        let res = 1;
        while(y > 0){
            let res = res * x;
            let y = y - 1;
        }
        return res;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a<b){
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a<b){
            return a;
        }
        return b;
    }
}
